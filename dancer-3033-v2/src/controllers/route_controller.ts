import { Request, Response } from "express";
import Route from "../models/route";
import db from '../database';
import log from '../log';
import Association from "../models/association";
import uuid = require("uuid");
export class RouteController {
    public routes(app: any): void {
        log(
            `游끱游끱游끱    RouteController: 游눛  setting up default Route routes ... `,
        );
        /////////
        app.route("/getRoutesByAssociation").post(async (req: Request, res: Response) => {
            log(
                `\n\n游눥  POST: /getRoutesByAssociation requested .... 游눥 游눥 游눥 游눥 游눥 游눥  ${new Date().toISOString()}`,
            );
            console.log(req.body);
            try {
                const now = new Date().getTime();
                // const asses = await Association.find();
                // log(asses);
                const assID = req.body.associationID.trim();
                log(`游눥 游눥 游눥 游눥 游눥 游눥 associationID: 驕떮잺驕떮잺 ${assID} 驕떮잺驕떮잺`)
                // const result = await Route.find({
                //     "associationDetails.associationID": assID,
                // });
                const result = await Route.find();
                //const result = await Landmark.find({
                //     'routeDetails.routeID': req.body.id
                // });
                log(result);
                const end = new Date().getTime();
                log(`游댅游댅游댅 elapsed time: ${end / 1000 - now / 1000} seconds for query`)

                res.status(200).json(result);
            } catch (err) {
                console.error(err);
                res.status(400).json(
                    {
                        error: err,
                        message: ' 游꼝游꼝游꼝游꼝 getRoutes failed'
                    }
                )
            }
        });
        app.route("/addRoute").post(async (req: Request, res: Response) => {
            log(
                `\n\n游눥  POST: /addRoute requested .... 游눥 游눥 游눥 游눥 游눥 游눥  ${new Date().toISOString()}`,
            );
            console.log(req.body);
            try {
                const route: any = new Route(req.body);
                route.routeID = uuid();
                const result = await route.save();
                log(result);
                res.status(200).json(result);
            } catch (err) {
                res.status(400).json(
                    {
                        error: err,
                        message: ' 游꼝游꼝游꼝游꼝 addRoute failed'
                    }
                )
            }
        });
        app.route("/addCalculatedDistances").post(async (req: Request, res: Response) => {
            log(
                `\n\n游눥  POST: /addCalculatedDistances requested .... 游눥 游눥 游눥 游눥 游눥 游눥  ${new Date().toISOString()}`,
            );
            console.log(req.body);
            try {
                const route: any = await Route.findOne({ routeID: req.body.routeID });
                route.calculatedDistances = req.body.calculatedDistances;
                const result = await route.save();
                log(`游눛游눛 Distances added to route. ${route.calculatedDistances.length} - 游비游눝 ${route.name}`);
                log(result);
                res.status(200).json(result);
            } catch (err) {
                res.status(400).json(
                    {
                        error: err,
                        message: ' 游꼝游꼝游꼝游꼝 addCalculatedDistances failed'
                    }
                )
            }
        });
        app.route("/addRoutePoints").post(async (req: Request, res: Response) => {
            log(
                `\n\n游눥  POST: /addRoutePoints requested .... 游눥 游눥 游눥 游눥 游눥 游눥  ${new Date().toISOString()}`,
            );
            console.log(req.body);
            try {
                const route: any = await Route.findOne({ routeID: req.body.routeID });
                // check clear flag
                if (req.body.clear == true) {
                    route.routePoints = [];
                }
                req.body.routePoints.forEach((p: any) => {
                    route.routePoints.push(p);
                });
                
                const result = await route.save();
                log(`游눛游눛 Points added to route. ${route.routePoints.length} - 游비游눝 ${route.name}`);
                log(result);
                res.status(200).json(result);
            } catch (err) {
                res.status(400).json(
                    {
                        error: err,
                        message: ' 游꼝游꼝游꼝游꼝 addRoutePoints failed'
                    }
                )
            }
        });
        app.route("/addRawRoutePoints").post(async (req: Request, res: Response) => {
            log(
                `\n\n游눥  POST: /addRawRoutePoints requested .... 游눥 游눥 游눥 游눥 游눥 游눥  ${new Date().toISOString()}`,
            );
            console.log(req.body);
            try {
                const route: any = await Route.findOne({ routeID: req.body.routeID });
                // check clear flag
                if (req.body.clear == true) {
                    route.rawRoutePoints = [];
                }
                req.body.rawRoutePoints.forEach((p: any) => {
                    route.rawRoutePoints.push(p);
                });
                
                const result = await route.save();
                log(`游눛游눛 Points added to route. ${route.rawRoutePoints.length} - 游비游눝 ${route.name}`);
                log(result);
                res.status(200).json(result);
            } catch (err) {
                res.status(400).json(
                    {
                        error: err,
                        message: ' 游꼝游꼝游꼝游꼝 addRawRoutePoints failed'
                    }
                )
            }
        });
        app.route("/updateRoutePoints").post(async (req: Request, res: Response) => {
            log(
                `\n\n游눥  POST: /updateRoutePoints requested .... 游눥 游눥 游눥 游눥 游눥 游눥  ${new Date().toISOString()}`,
            );
            console.log(req.body);
            try {
                const routeID = req.body.routeID;
                const points = req.body.routePoints;
                const route: any = await Route.findOne({ routeID: routeID });
                if (!route) {
                    throw new Error('Route not found');
                }
                let cnt = 0;
                let cnt2 = 0;
                route.routePoints.forEach((p: any) => {
                    points.forEach((landmarkPoint: any) => {
                        cnt2++;
                        if (p.latitude === landmarkPoint.latitude && p.longitude === landmarkPoint.longitude) {
                            p = landmarkPoint;
                            cnt++;
                            log(`驕떮잺 Updated this landmark point: 游비 #${cnt} 游비 normal point 游꼝 #${cnt2} for ${route.name} 游눛游눛 `);
                        }
                    });

                });


                await route.save();

                log(`游눛游눛 Points updated. ${cnt} 驕떮잺驕떮잺 for route: ${route.name} 游비游눝`);
                res.status(200).json(route);
            } catch (err) {
                console.error(err);
                res.status(400).json(
                    {
                        error: err,
                        message: ' 游꼝游꼝游꼝游꼝 updateRoutePoints failed'
                    }
                )
            }
        });
    }
}

export default RouteController;